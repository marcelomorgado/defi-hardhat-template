{
  "language": "Solidity",
  "sources": {
    "contracts/Counter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.4;\n\n\ncontract Counter {\n    uint256 private count;\n\n    event CountedTo(uint256 number);\n\n    constructor() {\n        count = 0;\n\n    }\n\n    function getCount() public view returns (uint256) {\n        return count;\n    }\n\n    function countUp() public returns (uint256) {\n        uint256 newCount = count + 1;\n        require(newCount > count, \"Uint256 overflow\");\n        count = newCount;\n        emit CountedTo(count);\n        return count;\n    }\n\n    function countDown() public returns (uint256) {\n        uint256 newCount = count - 1;\n        require(newCount < count, \"Uint256 underflow\");\n        count = newCount;\n        emit CountedTo(count);\n        return count;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}